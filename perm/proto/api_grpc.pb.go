// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api.proto

package proto

import (
	context "context"
	_go "github.com/mattgonewild/brutus/proto/go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Perm_Connect_FullMethodName  = "/perm.Perm/Connect"
	Perm_Shutdown_FullMethodName = "/perm.Perm/Shutdown"
)

// PermClient is the client API for Perm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Perm_ConnectClient, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permClient struct {
	cc grpc.ClientConnInterface
}

func NewPermClient(cc grpc.ClientConnInterface) PermClient {
	return &permClient{cc}
}

func (c *permClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Perm_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Perm_ServiceDesc.Streams[0], Perm_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &permConnectClient{stream}
	return x, nil
}

type Perm_ConnectClient interface {
	Send(*_go.Combination) error
	Recv() (*_go.Permutation, error)
	grpc.ClientStream
}

type permConnectClient struct {
	grpc.ClientStream
}

func (x *permConnectClient) Send(m *_go.Combination) error {
	return x.ClientStream.SendMsg(m)
}

func (x *permConnectClient) Recv() (*_go.Permutation, error) {
	m := new(_go.Permutation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *permClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Perm_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServer is the server API for Perm service.
// All implementations must embed UnimplementedPermServer
// for forward compatibility
type PermServer interface {
	Connect(Perm_ConnectServer) error
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermServer()
}

// UnimplementedPermServer must be embedded to have forward compatible implementations.
type UnimplementedPermServer struct {
}

func (UnimplementedPermServer) Connect(Perm_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPermServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedPermServer) mustEmbedUnimplementedPermServer() {}

// UnsafePermServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermServer will
// result in compilation errors.
type UnsafePermServer interface {
	mustEmbedUnimplementedPermServer()
}

func RegisterPermServer(s grpc.ServiceRegistrar, srv PermServer) {
	s.RegisterService(&Perm_ServiceDesc, srv)
}

func _Perm_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PermServer).Connect(&permConnectServer{stream})
}

type Perm_ConnectServer interface {
	Send(*_go.Permutation) error
	Recv() (*_go.Combination, error)
	grpc.ServerStream
}

type permConnectServer struct {
	grpc.ServerStream
}

func (x *permConnectServer) Send(m *_go.Permutation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *permConnectServer) Recv() (*_go.Combination, error) {
	m := new(_go.Combination)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Perm_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Perm_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Perm_ServiceDesc is the grpc.ServiceDesc for Perm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Perm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perm.Perm",
	HandlerType: (*PermServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _Perm_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Perm_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
