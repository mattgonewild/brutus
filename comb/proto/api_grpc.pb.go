// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Comb_Connect_FullMethodName  = "/comb.Comb/Connect"
	Comb_Shutdown_FullMethodName = "/comb.Comb/Shutdown"
)

// CombClient is the client API for Comb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Comb_ConnectClient, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type combClient struct {
	cc grpc.ClientConnInterface
}

func NewCombClient(cc grpc.ClientConnInterface) CombClient {
	return &combClient{cc}
}

func (c *combClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Comb_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Comb_ServiceDesc.Streams[0], Comb_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &combConnectClient{stream}
	return x, nil
}

type Comb_ConnectClient interface {
	Send(*Request) error
	Recv() (*Combination, error)
	grpc.ClientStream
}

type combConnectClient struct {
	grpc.ClientStream
}

func (x *combConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *combConnectClient) Recv() (*Combination, error) {
	m := new(Combination)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *combClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Comb_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombServer is the server API for Comb service.
// All implementations must embed UnimplementedCombServer
// for forward compatibility
type CombServer interface {
	Connect(Comb_ConnectServer) error
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCombServer()
}

// UnimplementedCombServer must be embedded to have forward compatible implementations.
type UnimplementedCombServer struct {
}

func (UnimplementedCombServer) Connect(Comb_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCombServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedCombServer) mustEmbedUnimplementedCombServer() {}

// UnsafeCombServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombServer will
// result in compilation errors.
type UnsafeCombServer interface {
	mustEmbedUnimplementedCombServer()
}

func RegisterCombServer(s grpc.ServiceRegistrar, srv CombServer) {
	s.RegisterService(&Comb_ServiceDesc, srv)
}

func _Comb_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CombServer).Connect(&combConnectServer{stream})
}

type Comb_ConnectServer interface {
	Send(*Combination) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type combConnectServer struct {
	grpc.ServerStream
}

func (x *combConnectServer) Send(m *Combination) error {
	return x.ServerStream.SendMsg(m)
}

func (x *combConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Comb_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comb_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Comb_ServiceDesc is the grpc.ServiceDesc for Comb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comb.Comb",
	HandlerType: (*CombServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _Comb_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Comb_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
