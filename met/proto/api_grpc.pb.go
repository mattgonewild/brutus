// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Met_Report_FullMethodName           = "/met.Met/Report"
	Met_GetWorkers_FullMethodName       = "/met.Met/GetWorkers"
	Met_GetWorker_FullMethodName        = "/met.Met/GetWorker"
	Met_GetWorkerProc_FullMethodName    = "/met.Met/GetWorkerProc"
	Met_GetWorkerCpu_FullMethodName     = "/met.Met/GetWorkerCpu"
	Met_GetWorkerMem_FullMethodName     = "/met.Met/GetWorkerMem"
	Met_GetWorkerNet_FullMethodName     = "/met.Met/GetWorkerNet"
	Met_GetWorkerUptime_FullMethodName  = "/met.Met/GetWorkerUptime"
	Met_GetWorkerLoadAvg_FullMethodName = "/met.Met/GetWorkerLoadAvg"
	Met_GetPoolLoad_FullMethodName      = "/met.Met/GetPoolLoad"
	Met_Shutdown_FullMethodName         = "/met.Met/Shutdown"
)

// MetClient is the client API for Met service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (Met_ReportClient, error)
	GetWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkersResponse, error)
	GetWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerResponse, error)
	GetWorkerProc(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*ProcResponse, error)
	GetWorkerCpu(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*CpuResponse, error)
	GetWorkerMem(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*MemResponse, error)
	GetWorkerNet(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*NetResponse, error)
	GetWorkerUptime(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
	GetWorkerLoadAvg(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*LoadAvgResponse, error)
	GetPoolLoad(ctx context.Context, in *PoolLoadRequest, opts ...grpc.CallOption) (*PoolLoadResponse, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type metClient struct {
	cc grpc.ClientConnInterface
}

func NewMetClient(cc grpc.ClientConnInterface) MetClient {
	return &metClient{cc}
}

func (c *metClient) Report(ctx context.Context, opts ...grpc.CallOption) (Met_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Met_ServiceDesc.Streams[0], Met_Report_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metReportClient{stream}
	return x, nil
}

type Met_ReportClient interface {
	Send(*Worker) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type metReportClient struct {
	grpc.ClientStream
}

func (x *metReportClient) Send(m *Worker) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metReportClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metClient) GetWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WorkersResponse, error) {
	out := new(WorkersResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorker(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*WorkerResponse, error) {
	out := new(WorkerResponse)
	err := c.cc.Invoke(ctx, Met_GetWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerProc(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerProc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerCpu(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*CpuResponse, error) {
	out := new(CpuResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerCpu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerMem(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*MemResponse, error) {
	out := new(MemResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerMem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerNet(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*NetResponse, error) {
	out := new(NetResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerNet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerUptime(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerUptime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetWorkerLoadAvg(ctx context.Context, in *WorkerRequest, opts ...grpc.CallOption) (*LoadAvgResponse, error) {
	out := new(LoadAvgResponse)
	err := c.cc.Invoke(ctx, Met_GetWorkerLoadAvg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) GetPoolLoad(ctx context.Context, in *PoolLoadRequest, opts ...grpc.CallOption) (*PoolLoadResponse, error) {
	out := new(PoolLoadResponse)
	err := c.cc.Invoke(ctx, Met_GetPoolLoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Met_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetServer is the server API for Met service.
// All implementations must embed UnimplementedMetServer
// for forward compatibility
type MetServer interface {
	Report(Met_ReportServer) error
	GetWorkers(context.Context, *emptypb.Empty) (*WorkersResponse, error)
	GetWorker(context.Context, *WorkerRequest) (*WorkerResponse, error)
	GetWorkerProc(context.Context, *WorkerRequest) (*ProcResponse, error)
	GetWorkerCpu(context.Context, *WorkerRequest) (*CpuResponse, error)
	GetWorkerMem(context.Context, *WorkerRequest) (*MemResponse, error)
	GetWorkerNet(context.Context, *WorkerRequest) (*NetResponse, error)
	GetWorkerUptime(context.Context, *WorkerRequest) (*UptimeResponse, error)
	GetWorkerLoadAvg(context.Context, *WorkerRequest) (*LoadAvgResponse, error)
	GetPoolLoad(context.Context, *PoolLoadRequest) (*PoolLoadResponse, error)
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMetServer()
}

// UnimplementedMetServer must be embedded to have forward compatible implementations.
type UnimplementedMetServer struct {
}

func (UnimplementedMetServer) Report(Met_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedMetServer) GetWorkers(context.Context, *emptypb.Empty) (*WorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkers not implemented")
}
func (UnimplementedMetServer) GetWorker(context.Context, *WorkerRequest) (*WorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (UnimplementedMetServer) GetWorkerProc(context.Context, *WorkerRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerProc not implemented")
}
func (UnimplementedMetServer) GetWorkerCpu(context.Context, *WorkerRequest) (*CpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerCpu not implemented")
}
func (UnimplementedMetServer) GetWorkerMem(context.Context, *WorkerRequest) (*MemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerMem not implemented")
}
func (UnimplementedMetServer) GetWorkerNet(context.Context, *WorkerRequest) (*NetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNet not implemented")
}
func (UnimplementedMetServer) GetWorkerUptime(context.Context, *WorkerRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerUptime not implemented")
}
func (UnimplementedMetServer) GetWorkerLoadAvg(context.Context, *WorkerRequest) (*LoadAvgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLoadAvg not implemented")
}
func (UnimplementedMetServer) GetPoolLoad(context.Context, *PoolLoadRequest) (*PoolLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolLoad not implemented")
}
func (UnimplementedMetServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedMetServer) mustEmbedUnimplementedMetServer() {}

// UnsafeMetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetServer will
// result in compilation errors.
type UnsafeMetServer interface {
	mustEmbedUnimplementedMetServer()
}

func RegisterMetServer(s grpc.ServiceRegistrar, srv MetServer) {
	s.RegisterService(&Met_ServiceDesc, srv)
}

func _Met_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetServer).Report(&metReportServer{stream})
}

type Met_ReportServer interface {
	Send(*Status) error
	Recv() (*Worker, error)
	grpc.ServerStream
}

type metReportServer struct {
	grpc.ServerStream
}

func (x *metReportServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metReportServer) Recv() (*Worker, error) {
	m := new(Worker)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Met_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorker(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerProc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerProc(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerCpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerCpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerCpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerCpu(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerMem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerMem(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerNet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerNet(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerUptime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerUptime(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetWorkerLoadAvg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetWorkerLoadAvg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetWorkerLoadAvg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetWorkerLoadAvg(ctx, req.(*WorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_GetPoolLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).GetPoolLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_GetPoolLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).GetPoolLoad(ctx, req.(*PoolLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Met_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Met_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Met_ServiceDesc is the grpc.ServiceDesc for Met service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Met_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "met.Met",
	HandlerType: (*MetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkers",
			Handler:    _Met_GetWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _Met_GetWorker_Handler,
		},
		{
			MethodName: "GetWorkerProc",
			Handler:    _Met_GetWorkerProc_Handler,
		},
		{
			MethodName: "GetWorkerCpu",
			Handler:    _Met_GetWorkerCpu_Handler,
		},
		{
			MethodName: "GetWorkerMem",
			Handler:    _Met_GetWorkerMem_Handler,
		},
		{
			MethodName: "GetWorkerNet",
			Handler:    _Met_GetWorkerNet_Handler,
		},
		{
			MethodName: "GetWorkerUptime",
			Handler:    _Met_GetWorkerUptime_Handler,
		},
		{
			MethodName: "GetWorkerLoadAvg",
			Handler:    _Met_GetWorkerLoadAvg_Handler,
		},
		{
			MethodName: "GetPoolLoad",
			Handler:    _Met_GetPoolLoad_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Met_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _Met_Report_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
